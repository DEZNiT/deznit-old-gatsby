{"version":3,"sources":["webpack:///./src/pages/category.tsx","webpack:///./src/layouts/home/home.tsx"],"names":["__webpack_require__","r","__webpack_exports__","d","data","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","styled_components__WEBPACK_IMPORTED_MODULE_1__","_layouts_home_home__WEBPACK_IMPORTED_MODULE_2__","_constants_theme__WEBPACK_IMPORTED_MODULE_3__","_components__WEBPACK_IMPORTED_MODULE_4__","Categorypage","_ref","a","createElement","theme","color","style","textTransform","margin","textAlign","allMdx","edges","node","frontmatter","category","map","post","key","id","title","excerpt","des","url","path","img","thumbnail","tags","Layout","children","GlobalStyles","_public_static_d_856328897_json__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_1___default","Fragment","_components__WEBPACK_IMPORTED_MODULE_2__"],"mappings":"0FAAAA,EAAAC,EAAAC,GAAAF,EAAAG,EAAAD,EAAA,yBAAAE,IAAA,IAAAC,EAAAL,EAAA,GAAAM,EAAAN,EAAAO,EAAAF,GAAAG,EAAAR,EAAA,GAAAS,EAAAT,EAAA,KAAAU,EAAAV,EAAA,GAAAW,EAAAX,EAAA,IAgCaI,EAAI,aA0BFQ,UApDM,SAAAC,GAAA,IAAGT,EAAHS,EAAGT,KAAH,OACnBE,EAAAQ,EAAAC,cAACP,EAAA,EAAD,CAAeQ,MAAOA,KACpBV,EAAAQ,EAAAC,cAACN,EAAA,EAAD,KACEH,EAAAQ,EAAAC,cAACJ,EAAA,GAAD,CACEM,MAAM,UACNC,MAAO,CACLC,cAAe,aACfC,OAAQ,YACRC,UAAW,WALf,eAQejB,EAAKkB,OAAOC,MAAM,GAAGC,KAAKC,YAAYC,UAEpDtB,EAAKkB,OAAOC,MAAMI,IAAI,SAACC,GAAD,OACrBtB,EAAAQ,EAAAC,cAACJ,EAAA,SAAD,CACEkB,IAAKD,EAAKJ,KAAKM,GACfC,MAAOH,EAAKJ,KAAKC,YAAYM,MAC7BC,QAASJ,EAAKJ,KAAKC,YAAYQ,IAC/BC,IAAKN,EAAKJ,KAAKC,YAAYU,KAC3BC,IAAKR,EAAKJ,KAAKC,YAAYY,UAC3BC,KAAMV,EAAKJ,KAAKC,YAAYa,iGCqBvBC,IAhCA,SAAA1B,GAAuB,IAApB2B,EAAoB3B,EAApB2B,SAWVC,GAVOC,EAAAtC,KAUQY,IAAMyB,cAE3B,OACEE,EAAA7B,EAAAC,cAAA4B,EAAA7B,EAAA8B,SAAA,KACED,EAAA7B,EAAAC,cAAC0B,EAAD,MACAE,EAAA7B,EAAAC,cAAC8B,EAAA,QAAD,CAAS7B,MAAOA,KACd2B,EAAA7B,EAAAC,cAAC8B,EAAA,OAAD,KACEF,EAAA7B,EAAAC,cAAC8B,EAAA,OAAD,OAGFF,EAAA7B,EAAAC,cAAA,YAAOyB,GACPG,EAAA7B,EAAAC,cAAC8B,EAAA,OAAD","file":"component---src-pages-category-tsx-67b78cc7ac66b1c4d907.js","sourcesContent":["import React from \"react\"\nimport { graphql } from \"gatsby\"\nimport { ThemeProvider } from \"styled-components\"\nimport Layout from \"../layouts/home/home\"\nimport theme from \"../constants/theme\"\nimport { H2, PostCard } from \"../components\"\nconst Categorypage = ({ data }: any) => (\n  <ThemeProvider theme={theme}>\n    <Layout>\n      <H2\n        color=\"default\"\n        style={{\n          textTransform: \"capitalize\",\n          margin: \"4rem 0rem\",\n          textAlign: \"center\",\n        }}\n      >\n        Posts About {data.allMdx.edges[0].node.frontmatter.category}\n      </H2>\n      {data.allMdx.edges.map((post: any) => (\n        <PostCard\n          key={post.node.id}\n          title={post.node.frontmatter.title}\n          excerpt={post.node.frontmatter.des}\n          url={post.node.frontmatter.path}\n          img={post.node.frontmatter.thumbnail}\n          tags={post.node.frontmatter.tags}\n        ></PostCard>\n      ))}\n    </Layout>\n  </ThemeProvider>\n)\nexport const data = graphql`\n  query CategoryIndex($category: String) {\n    allMdx(filter: { frontmatter: { category: { eq: $category } } }) {\n      edges {\n        node {\n          id\n          excerpt\n          frontmatter {\n            author\n            thumbnail\n            des\n            date\n            path\n            title\n            category\n            tags {\n              tag\n              color\n            }\n          }\n        }\n      }\n    }\n  }\n`\n\nexport default Categorypage\n","/**\n * Layout component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport { ThemeProvider } from \"styled-components\"\nimport { Header, Wrapper, Navbar, Footer } from \"../../components\"\nimport theme from \"../../constants/theme\"\nimport \"./home.scss\"\n\nconst Layout = ({ children }: any) => {\n  const data = useStaticQuery(graphql`\n    query SiteTitleQuery {\n      site {\n        siteMetadata {\n          title\n        }\n      }\n    }\n  `)\n\n  const GlobalStyles = theme.GlobalStyles\n\n  return (\n    <>\n      <GlobalStyles />\n      <Wrapper theme={theme}>\n        <Header>\n          <Navbar></Navbar>\n        </Header>\n\n        <main>{children}</main>\n        <Footer></Footer>\n      </Wrapper>\n    </>\n  )\n}\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nexport default Layout\n"],"sourceRoot":""}